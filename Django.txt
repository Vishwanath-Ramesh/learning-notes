Django
  User requests a URL --> urls.py --> views.py --> models.py --> Database(SQLite)
                       User <-- HTML Templates <-- 

  models.py
    - contains all the information about the database
    - Query databases for getting info feed it back to views.py which creates the view of the website and uses HTML templates then send it back to the user.

Install Virtual Environment
    >> pip3 install virtualenv

Create new virtual environment
    >> virtualenv env

Start virtual environment
    >> source env/Scripts/activate

Install django
    >> pip install django

Creating a new project
  - A Django project is a collection of application and configurations that when combines together will make up the full web application.
  >> django-admin.py startproject tango_with_django_project
  Add . at the end, to create the project in the current working directory

Django Project Files
  __init__.py
    - This is a blank python script. 
    - If any directory contains this script, python treat this directory as a package.

  settings.py
    - Here we store all of the project settings.

  urls.py
    - Here we store all the url patterns for the project. i.e., different pages of our web application.

  wsgi.py
    - It acts as a Web Server Gateway Interface.
    - It helps to deploy our web application to production.

Running the dev server
    - cd into the project folder and run
    >> python manage.py runserver
    - Specify different ports
    >> python manage.py runserver <your_machines_ip_address>:5555

Migrations
  - A migration allows to move databases from one design to another, also reversible.

  Migrate python dependencies
      >> python manage.py migrate

Creating an App
  - A Django application is created to perform a particular functionality for your entire web application.
  - We can use these Django applications in other Django projects also we can use other Django applications in our Django projects. This process is also called as pluggable Django applications.
  - After creating an app, we should inform Django project that we have a new app created. For that, we need to add this app in project's settings.py.
  Eg: 
  <project-dir>/settings.py
  INSTALLED_APPS = ['app_1']
  
  >> python manage.py startapp todo

Django App Files
  __init__.js
    - Same purpose as of project.

  admin.js
    - We can register our models here whic Django will then use them with Django's admin interface.

  apps.py
    - Here we store the applications specific configurations.

  models.py
    - Here we store the applications data models.

  tests.py
    - Here we can store test functions to test our code.

  views.py
    - Here we have functions that handle requests and return responses.

  migrations directory
    - This directory stores database specific information as it relates to the models.

Create migrations after creating a Model
    >> python managr.py makemigrations
    >> python managr.py migrate - Then run this inorder to apply migrations which are not been already applied

Manage Admin
    - Navigate to the link /admin, you will see a login screen.
    - If you dont have the credentials yet, create one.
    - For that, run
    >> python manage.py createsuperuser

Register models
    - import the created model in admin.py
    > from .models import Todo
    > admin.site.register(Todo)

Creating function for overwriting default data created for models
    - By default, if we create any entry in any of the models, django represent it as Object or something.
    - In order to overwrite this, we have to manually code for that in models.py
    > def __str__(self):
          return self.name

Creating a View
    - Create a function which returns some response whenever particular URL is being accessed.
    Eg: <app>/views.py
    from django.http import HttpResponse

    def todo_lists(request):
        return HttpResponse("Hello world!")
    - Specify the route for the view in <project>/urls.py
    Eg: 
    from todo.views import todo_lists 
    urlpatterns = [
        path('', todo_lists), or url(r'^$', views.todo_lists, name='todo_lists')
    ]

HTML templates as a response
    - We can return a HTML page as a response. For that we have to create some HTML files and respond it to any of the requests.
    - In order to create an HTML file, there are two possible conventions where the particular HTML can be created.
      1. In <project-folder>/templates/todo_lists.html
      2. In <app-folder>/<app-name>/templates/todo_lists.html
    - If we preferred to use the template files in global/project directory, we have to tell the directory to the django in <project>/settings.py.
    Eg: TEMPLATES: [{DIRS: [os.path.join(BASE_DIR, 'templates')]}]
    - To use the template from app directory, 
    > return render(request, 'todo/todo_lists.html')
    - To use the templates from project directory,
    > return render(request, 'todo_lists2.html')

Create HTML base templates
    - Create a base html file template in <app-folder>/templates as base.html
    Eg: base.html
        <body>
        {% block content %} {% endblock content %}
    - Reuse that template in other html pages.
    Eg: {% extends "base.html" %} {% block content %} <h4>Create a Todo</h4> {% endblock content %}

Models
    1. Creating a foreign key field
    Eg:
      User
        firstname = models.CharField(max_length=30)

      Website
        owner = models.ForeignKey(User, on_delete=models.CASCADE)
    2. Creating a primary key field
    Eg:
      User
        firstname = models.CharField(primary_key=True)
    3. Creating a field with verbose name
    Eg:
      User
        firstname = models.CharField("this is person's first name", max_length=30)
    4. Creating a many to many link field
    Eg:
      User
        cars = models.ManyToManyField('Car', verbose_name="the user's cars")
    5. Meta - Things that are not represented as fields
    Eg: 
      Website
        owner = models.ForeignKey(User, on_delete=models.CASCADE)

        class Meta:
            ordering = ['owner']    
            db_table = 'Website_custom_table_name'
            verbose_name = 'The Website'
            verbose_name_plural = 'The Websites'
    6. Methods
    Eg:
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        def get_fullname(self):
            return f"my fullname is {self.firstname} {self.lastname}"

      Accessing model methods
      >> from user.models import User
      >> u = User.objects.first()
      >> u.get_fullname()
    7. Property
    Eg:
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        @property
        def get_fullname(self):
            return f"my fullname is {self.firstname} {self.lastname}"

      Accessing model methods
      >> from user.models import User
      >> u = User.objects.first()
      >> u.get_fullname
    8. Overriding built-in methods
    Eg:      
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        def __str__(self):
            return f"my fullname is {self.firstname} {self.lastname}"
    9. Overriding save method
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        def save(self, *args, **kwargs):
            // do something
            super().save(*args, **kwargs) // important

QuerySets
    1. Create / Update
    Eg:
    >> from posts.models import Blog
    b = Blog(name='Some name', tagline='some tag line') // other way(no need to call save after): Blog.objects.create(name='Some name', tagline='some tag line')
    b.save()
    Blog.objects.all()  // returns all the values as QuerySets
    b.name = 'name updated' // update QuerySets
    b.save()
    2. Filtering
    Eg:
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)
        dob = models.DateField()
        age = models.IntegerField()    

        User.objects.filter(name='some name')   // filter by string field
        User.objects.filter(name__startswith='some')   // filter by string field
        User.objects.filter(dob__year=1995, dob__month=12) // filter by year in a date field
        User.objects.filter(age__gte=18)    // filter by numeric field

Progress - 03.2.12(3)