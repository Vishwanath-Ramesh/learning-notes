Install Virtual Environment
    >> pip3 install virtualenv

Create new virtual environment
    >> virtualenv env

Start virtual environment
    >> source env/Scripts/activate

Install django
    >> pip install django

Creating a new project
    >> django-admin.py startproject tango_with_django_project
    Add . at the end, to create the project in the current working directory

Running the dev server
    - cd into the project folder and run
    >> python manage.py runserver
    - Specify different ports
    >> python manage.py runserver <your_machines_ip_address>:5555

Migrate python dependencies
    >> python manage.py migrate

Creating an App
    >> python manage.py startapp todo

Create migrations after creating a Model
    >> python managr.py makemigrations
    >> python managr.py migrate - Then run this inorder to apply migrations which are not been already applied

Manage Admin
    - Navigate to the link /admin, you will see a login screen.
    - If you dont have the credentials yet, create one.
    - For that, run
    >> python manage.py createsuperuser

Register models
    - import the created model in admin.py
    > from .models import Todo
    > admin.site.register(Todo)

Creating function for overwriting default data created for models
    - By default, if we create any entry in any of the models, django represent it as Object or something.
    - In order to overwrite this, we have to manually code for that in models.py
    > def __str__(self):
          return self.name

Creating a View
    - Create a function which returns some response whenever particular URL is being accessed.
    Eg: <app>/views.py
    from django.http import HttpResponse

    def todo_lists(request):
        return HttpResponse("Hello world!")
    - Specify the route for the view in <project>/urls.py
    Eg: 
    from todo.views import todo_lists 
    urlpatterns = [
        path('', todo_lists),
    ]

HTML templates as a response
    - We can return a HTML page as a response. For that we have to create some HTML files and respond it to any of the requests.
    - In order to create an HTML file, there are two possible conventions where the particular HTML can be created.
      1. In <project-folder>/templates/todo_lists.html
      2. In <app-folder>/<app-name>/templates/todo_lists.html
    - If we preferred to use the template files in global/project directory, we have to tell the directory to the django in <project>/settings.py.
    Eg: TEMPLATES: [{DIRS: [os.path.join(BASE_DIR, 'templates')]}]
    - To use the template from app directory, 
    > return render(request, 'todo/todo_lists.html')
    - To use the templates from project directory,
    > return render(request, 'todo_lists2.html')

Create HTML base templates
    - Create a base html file template in <app-folder>/templates as base.html
    Eg: base.html
        <body>
        {% block content %} {% endblock content %}
    - Reuse that template in other html pages.
    Eg: {% extends "base.html" %} {% block content %} <h4>Create a Todo</h4> {% endblock content %}

Models
    1. Creating a foreign key field
    Eg:
      User
        firstname = models.CharField(max_length=30)

      Website
        owner = models.ForeignKey(User, on_delete=models.CASCADE)
    2. Creating a primary key field
    Eg:
      User
        firstname = models.CharField(primary_key=True)
    3. Creating a field with verbose name
    Eg:
      User
        firstname = models.CharField("this is person's first name", max_length=30)
    4. Creating a many to many link field
    Eg:
      User
        cars = models.ManyToManyField('Car', verbose_name="the user's cars")
    5. Meta - Things that are not represented as fields
    Eg: 
      Website
        owner = models.ForeignKey(User, on_delete=models.CASCADE)

        class Meta:
            ordering = ['owner']    
            db_table = 'Website_custom_table_name'
            verbose_name = 'The Website'
            verbose_name_plural = 'The Websites'
    6. Methods
    Eg:
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        def get_fullname(self):
            return f"my fullname is {self.firstname} {self.lastname}"

      Accessing model methods
      >> from user.models import User
      >> u = User.objects.first()
      >> u.get_fullname()
    7. Property
    Eg:
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        @property
        def get_fullname(self):
            return f"my fullname is {self.firstname} {self.lastname}"

      Accessing model methods
      >> from user.models import User
      >> u = User.objects.first()
      >> u.get_fullname
    8. Overriding built-in methods
    Eg:      
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        def __str__(self):
            return f"my fullname is {self.firstname} {self.lastname}"
    9. Overriding save method
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)

        def save(self, *args, **kwargs):
            // do something
            super().save(*args, **kwargs) // important

QuerySets
    1. Create / Update
    Eg:
    >> from posts.models import Blog
    b = Blog(name='Some name', tagline='some tag line') // other way(no need to call save after): Blog.objects.create(name='Some name', tagline='some tag line')
    b.save()
    Blog.objects.all()  // returns all the values as QuerySets
    b.name = 'name updated' // update QuerySets
    b.save()
    2. Filtering
    Eg:
      User
        firstname = models.CharField(max_length=30)
        lastname = models.CharField(max_length=30)
        dob = models.DateField()
        age = models.IntegerField()    

        User.objects.filter(name='some name')   // filter by string field
        User.objects.filter(name__startswith='some')   // filter by string field
        User.objects.filter(dob__year=1995, dob__month=12) // filter by year in a date field
        User.objects.filter(age__gte=18)    // filter by numeric field

Progress - 03.2.12(3)