TypeScript
	"Typescript is a typed superset of JavaScript that compiles to plain JavaScript"
	- Open source by Microsoft
	- Static type system
	- Superset of JavaScript. i.e., TypeScript gives us few more features butit also gives us all of the capabilities of JavaScript.
	- Provides optional static typing
	
Why TypeScript
	- Typed JavaScript, code quality and understanding
	- Types acts as a documentation
	- TypeScript is JavaScript
	- Type inference
	- Structural types
	- Adoption can be incremental
	- Brand new ECMAScript features
	
Commands
	> tsc init or tsc --init - Initialize tsconfig.json
	> tsc --outDir dist - Create the output JavaScript files inside this folder.
	> tsc --watch or tsc -W - Enable watch mode

Types
	number
	string
	boolean
	object
	array
	Tuple
	Enums
	Any

Operators
	1. non-null assertion operator
		- this expression cannot be null or undefined here, so don't complain about the possibility of it being null or undefined
		Eg:
		const input = document.getElementById("num1")!;

Type casting
	Eg: const input = document.getElementById("num1")! as HTMLInputElement;

Tuple
	It is a special type of array having constant element length with specified type.
	Ref: ./Examples.ts

Union type
	Ref: ./Examples.ts

Unknown type
	Anything is assignable to unknown, but unknown isn't assignable to anything but itself
	Ref: ./Examples.ts

Never type
	It is mainly used in functions which never returns any value even 'undefined'.
	Ref: ./Examples.ts

Literal type
	Ref: ./Examples.ts

Assertions or Type aliases or Custom types
	Ref: ./Examples.ts

Enums
	Ref: ./Examples.ts

Function as Types
	Ref: ./Examples.ts

class
	Ref: ./Examples.ts

Generics
	Ref: ./Generics.ts

Overloading
	Ref: ./Overloading.ts

typing this
	Ref: ./Examples.ts

typeof and keyof
	Ref: ./Examples.ts

Map type
	Ref: ./Examples.ts

Intersection type
	- Used to create a new type based on multiple types.
	- In case of Union type, the resulting type will be a combination of intersection types and in case of object types, the resulting type will be combination of all the properties present.
	Ref: ./Examples.ts

Augmenting type declarations
	Ref: ./Examples.ts

ReadOnly
	- Read-only members cannot be changed outside the class, they either need to be initialized at declaration or initialized inside the class constructor.
	Ref: ./Examples.ts

Interface vs type
	- A type cannot be re-opened to add new properties vs an interface which is always extendable.
	Ref: ./Examples.ts
	https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces	