NodeJS
    1.Runs on V8 engine
    2.It keeps on running as long as there are event listeners are registered.
      Eg : server.listen(3000);
    3.Entire node process uses Single threaded JavaScript.
    4.We can export modules in difference ways
      1.module.exports.handler = requestHandler;
      2.exports.handler = requestHandler;
      3.module.exports = {
        handler: requestHandler,
        value: "Some Text"
      }

NPM
  1.We can configure the entry point in package.JSON
    "scripts" : {
      "start" : "node app.js"
    }
    > npm start
  2.we can also create additional scripts rather built-in keywords.
    "scripts" : {
      "start" : "node app.js",
      "start-server" : "node app.js"
    }
    The script keywords other that built-in can be run by
    > npm run start-server
  3.Install package with env. dependancy
    --save  production dependancy
    --save-dev  development dependancy
    -g  install globally and can be accessed any where.
  4.We can configure nodemon for autorestarts
    "scripts" : {
      "start" : "nodemon app.js"
    }
    > npm start

Command Line args
	1. Access command line args in app source
	   process.argv	// prints all the commands specified on terminal
	2. Parse command line arguments with a package called yargs
	   npm i yargs
	3. Acces CLA using yargs
	   const yargs = require('yargs')
	   yargs.argv
	4. yargs customizations
	   Version - yargs.version('1.1.0')
	   Command - yargs.command({command: 'add', describe: 'Adds something', handler: () => {})
	5. Configure for additional parameters to CLA so that can be accessed within the handler
	   yargs.command({command: 'add', describe: 'Adds something', handler: (argv) => {}, builder: { title: { describe: 'Note title', demandOption: true // required / not, type: 'string' // what type of value should be passed } })
	   > node app.js add --title="New note"
	6. All the above yargs config won't work if we haven't logged CLA of yargs(yargs.argv) or yargs.parse()

	

Debugging
  1.Autorestart can be configured for debugging once code changes
    1.Menu -> Debugging -> -> Add Configurations -> launch.json file -> in configurations object -> set "restart": true, "runtimeExecutable": "nodemon".
  2.Change console by
    1.Menu -> Debugging -> -> Add Configurations -> launch.json file -> in configurations object -> set "console": "integratedTerminal".

Routes
  1.We can n number of routes in root file.
  2.If multiple routes were registered, next() should be called to switch over the next routes in the current / previous routes.
  3.Request body should be parsed before using.
  4.The request body can be parsed using the 3rd party package - body-parser
    Eg: app.use(bodyParse.urlencoded({extended: false}));
        req.body  //{title: "book"}
  5.app.use() triggers for both POST and GET requests
    We can avoid by using,
    app.post() -> for POST
    app.get() -> for GET
    app.get & app.post executes exact match routes.
  6.Status codes, headers and other methods can be set before sending the response to the server by chaining the methods.
    res.Status(404).send();

package
  1.Path
    1.It builds a path by joining sub directories and able handle for different OS environments.
    2.The global variable '__dirname' gives the current path in which the file is located.

Serving Static Files
  1.Static files can be served by specifying the directory path in root file
    Eg : app.use(express.static(path.join(__dirname, 'public')));
	
Accessing query string in routes	
	console.log(req.query)
	
Parse incoming request as JSON
	app.use(express.json());

Deployment
	1.Install heroku
	2.Login to heroku
	3.Create a repository in git for the project
	4.Create SSH key in case you dont have one
	  $ ssh-keygen -t rsa -b 4096 -C "Any comment"
	  Start SSH agent
	  $ eval ssh-agent -s
	  Add the created key 
	  $ ssh-add -K  ~/.ssh/id_rsa
	5.Test whether SSH is working or not
	  $ ssh -T git@github.com
	6.Push source to git
	7.Add SSH keys to heroku
	  > heroku keys:add
	8.In root of the project, create heroku app
	  > heroku create vishwa-node-app
	9.Specify start scripts in package.json
	  "start" : "node src/app.js"
	10.Specify port in startup page
	   const port = process.env.PORT || 3000
	   app.listen(port)
	11.Push to heroku git remote
	   $ git push heroku master
	12.New feature deployment
	   Push to git and heroku. That's it.

Authentication
  - Whenever the user is signing up, jwt token is created using the user id and secret key. The same token will be sent back to the client.
  Eg :  const token = jwt.sign({id: 'john'}, process.env.JSON_SECRET, {expiresIn: JWT_EXPIRES_IN})

Protecting routes
	1. Check whether the token is available in 'Authorization' header and it starts with 'Bearer'
	2. Verify the received token - const decoded = await promisify(jwt.verify)(receivedToken, SECRET_KEY) 
	3. Check user still exits - findOne({id: decoded.id })
	4. Check whether the user has changed the password after login
