display
	inline
		default value for all the elements, but 'user agent' style sheet of the browser overrides for some elements.
		An inline element will accept margin and padding, but the element still sits inline. Margin and padding will only push other elements horizontally away, not vertically
		An inline element will not accept height and width. It will just ignore it
	inline-block
		An element set to inline-block is very similar to inline, the difference is that you are able to set a width and height
	block
		elements that are set to block by the browser UA stylesheet is said to be block level elements. Eg. div, p etc.
		Block level elements do not sit inline but breaks and take up as much horizontal space as they can
	none
		Entirely removes the element visually from the page, while the element is still in the DOM
		you canâ€™t tab to it or its children, it is ignored by screen readers

width on div
	- Setting the width of a block-level element will prevent it from stretching out to the edges of its container to the left and right.

Center the div
	- You can set the left and right margins to auto to horizontally center that element within its container. The element will take up the width you specify, then the remaining space will be split evenly between the two margins.
	- When the browser window is narrower than the width of your element, then the browser resolves this by creating a horizontal scrollbar on the page.

max-width in div
	- Using max-width instead of width in this situation will improve the browser's handling of small windows.

the box model
	- When you set the width of an element, the element can actually appear bigger than what you set: the element's border and padding will stretch out the element beyond the specified width
	- To overcome this, we do
	-webkit-box-sizing: border-box;
     	-moz-box-sizing: border-box;
        box-sizing: border-box;

Position
	Static
	- It is the default value. An element with position: static; is not positioned in any special way.
	Relative
	- It behaves the same as static unless you add some extra properties.
	Fixed
	- A fixed element is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled.
	Absolute
	- It behaves like fixed except relative to the nearest positioned ancestor instead of relative to the viewport. 
	If an absolutely-positioned element has no positioned ancestors, it uses the document body, and still moves along with page scrolling.

Clear
	http://learnlayout.com/clear.html

Column
	Multi column text
	.three-column {
  padding: 1em;
  -moz-column-count: 3;
  -moz-column-gap: 1em;
  -webkit-column-count: 3;
  -webkit-column-gap: 1em;
  column-count: 3;
  column-gap: 1em;
}

CSS Transforms
Scale
	Increase or Decrease size through X or Y
Skew
	Tilts the element to the left or right
	+X => Left tilt
	-X => Right tilt
	+Y => Down tilt
	-Y => Up tilt
Rotate
	Rotates the element either clockwise or anti clockwise
Translate
	Moves the element sideways or up or down
	+X => Moves right
	-X => Moves left
	+Y => Moves downwards
	-Y => Moves upwards

Transform
	perspective
		- The perspective property defines how far the object is away from the user. So, a lower value will result in a more intensive 3D effect than a higher value.
		- When defining the perspective property for an element, it is the CHILD elements that get the perspective view, NOT the element itself.
	
	translate3d
		- repositions an element in 3D space
		- values in (X, Y, Z)

Keyframe animations
	animation(shorthand)
	animation-name - name given to the keyframe
	animation-duration - time of animation
	animation-timing-function - same like transition. CB/easeout etc
	animation-delay - animation plays after this delay
	animation-direction - movement direction
	animation-iteration-count - no of animation going to play
	animation-fill-mode - direction in which the 100% completed. forward backward etc
	animation-play-state

	@keyframes bounce{
		0%{
		   transform	
		}
		100%{
		   transform	
		}
	}
