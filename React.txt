ReactJS
	A javascript library for building User Interfaces.
	Follows the component-based approach and helps in building reusable UI components.
	Makes use of the virtual DOM instead of the real DOM

Virtual DOM
	It is just an exact copy of Real DOM
	Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.
	Then the difference between the previous DOM representation and the new one is calculated.
	Once the calculations are done, the real DOM will be updated with only the things that have actually changed.

React Fiber
	- Fiber is the new reconciliation engine in React 16. 
	- Its main goal is to enable incremental rendering of the virtual DOM. 
	- React Fiber is an ongoing reimplementation of React's core algorithm. 	
	- The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures.
	- Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.

Components
	It may be a class or a function which optionally accepts props as inputs and returns a single react element that describes how a part of UI sould apprear.
	
Fragment
	Instead of specifying a div to return a single element in a component, we can specify it as a fragment to list all the elements under the root component.
	
SPA
	Contains only one HTML page which is retrieved from the server once we make the request to the server.

The Component Lifecycle
    - There are 3 phases.
      1. Mounting - when an instance of a component is being created and inserted into the DOM
		*constructor(props)
			- It is called before a component is mounted.
			- It should call super(props) before any other statement.
		*static getDerivedStateFromProps(props, state)
			- It should return an object to update the state, or null to update nothing.
			- Triggered on every render.
		componentWillMount
			- This will continue to work untill v17. For v17 & above, it is renamed to UNSAFE_componentWillMount().
			- No side effects are used in here.
			- This is the only lifecycle method called on server rendering.
		*render()
			- It should return one of the following types React elements, Arrays, fragments, Portals, String, numbers, Booleans or null.
			- It should be a pure function. 
		*componentDidMount
			- It is invoked immediately after a component is mounted (inserted into the tree).
			- After this only, browser paint happens.
      2. Updating - An update can be caused by changes to props or state
		static getDerivedStateFromProps(props, state)
			- Refer above.
		shouldComponentUpdate(nextProps, nextState)
			- It is used to control React component when there is a changes in props or state.
			- It returns 'true' by default, so that component gets re-rendered on every state change.
			- It is used for  performance optimization.
			- Instead of implementing this by hand, we can also use React.PureComponent.
			- If it returns,
				true - Component gets re-rendered.
				false - Component wll not re-render and UNSAFE_componentWillUpdate(), render(), and componentDidUpdate() will not be invoked.
		render()
			- Refer above. 
		getSnapshotBeforeUpdate(prevProps, prevState)
			- It is invoked right before the most recently rendered output is committed to the DOM.
			- Any value returned by this lifecycle method will be passed as a parameter to componentDidUpdate()
		componentWillReceiveProps(nextProps)
			- This will continue to work untill v17. For v17 & above, it is renamed to UNSAFE_componentWillReceiveProps(nextProps).
			- It is invoked before a mounted component receives new props or parent component re-renders even if it's props have not changed. 
			- It's not triggered initially during mounting, only if props changed.
		componentWillUpdate(nextProps, nextState)
			- This will continue to work untill v17. For v17 & above, it is renamed to UNSAFE_componentWillUpdate(nextProps, nextState).
			- It is invoked just before rendering when new props or state are being received
		*componentDidUpdate(prevProps, prevState, snapshot)
			- It is invoked immediately after updating occurs. 
			- It is not called for the initial render.
      3. Unmounting - called when a component is being removed from the DOM.
	 	componentWillUnmount
	  		- It is invoked immediately before a component is unmounted and destroyed.
			- It can be used to perform any necessary cleanup in this method.
      4. Error handling - These methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.
		getDerivedStateFromError(error)
			- It is invoked after an error has been thrown by a descendant component.
			- It should return a value to update the component state.
			- It is called during the “render” phase, so side-effects are not permitted.
	 	componentDidCatch(error, info)
		 	- It is invoked after an error has been thrown by a descendant component.
			- It is called during the “commit” phase, so side-effects are permitted.

Shallow comparison
	- It checks for equality.
	- If it compares scalar values(Strings and Numbers), it's values are compared. When comparing objects, it does not compare their attributes - only their references are compared.

Regular component vs Pure component
	Regular component
		- It doesn’t implement shouldComponentUpdate() by default

	Pure component
		- It renders the same result given the same props and state
		- It does implement shouldComponentUpdate() by default
		- It performs a shallow comparison of props and state and reduces the chance that you’ll skip a necessary update

Create React Project
	1.Install create-react-app using npm globally.
		npm install -g create-react-app or npm init react-app myapp
	2.Create a new project using below cmd in required folder.
		create-react-app reacttest --scripts-version 1.1.5
	3.After creating, navigate to the created folder and start the project.
		npm start

NPM Commands
	1.npm install --save [packagename]
		--save : Save entry in JSON.package file
		
Project Stucture
	1.Contains only one HTML file
	2.COntains single 'root' component(App.js) in which all the other component are branched.
	3.App starts with the main file(Index.js) where the root component is rendered.
	
JSX
	It stands for Javascript XML/HTML 
	it is a Syntax extension to javascript and is used to create react elements in a component
	With JSX, we dont have to put the markup and logic in a seperate file.
	1. We can create a new element by using	
		React.createElement('h1', {className: 'App'}, 'Hello from React.');

Props in Components
	It stands for properties and is being used for passing data from one component to another in uni-directional flow. ie., from parent to child not from child to parent.
	The props are readonly, it can't be changed in child components.
	1.We can pass parameters to a components from both in/out side of the property initialization.
		<Person name="Max">Software Engineer</Person>
		props.name => Max
		props.children => Software Engineer
	Note : props will be this.props if class based components (class Person extends Components) are used.

States
	States are the source of data for React components.
	1.States are managed inside a Component.
	2.We can create and use a State only inside a Component (Class extends Component).

Hooks
	1.We already know that we can't create or modify state in function based component but with React Hooks we can.
	2.React hooks helps us to create and modify the state in function based components.
	  import React, {useState} from 'react';

	3.The useState returns an array of current state object and object to set/update the state. The useState can be of any type(string, boolean, object etc.,)
	  const [personState, setPersonState] = useState({person : [name : "Max", age: 25]}, otherState : "Some Value");
	4.useState is unlike class based component state where it replaces the other states.
	const newState = setPersonState({person : [name : "Max", age: 25]});
	newState only has 'Person' object and 'otherState' gets overwritten/replaced.

Keys in React
    - Keys help React identify which items have changed, are added, or are removed

Refs
    - Refs provide a way to access DOM nodes or React elements

Render Props
    - It's a technique for sharing code between React components using a prop whose value is a function.
    - a render prop is a function prop that a component uses to know what to render

HOC vs Render prop
    - It is possible two HOC could be using the same prop meaning one would overwrite the other silently
    - Boilerplate code like setting the displayName with the HOC function name e.g. (withHOC(Component)) to help with debugging
    - Ensure all relevant props are passed through to the component
    - It is easy to compose several HOCs together and then this creates a deeply nested tree making it difficult to debug

Synthetic Event
    - It's a cross-browser wrapper around the browser’s native event. It has the same interface as the browser’s native event.

Code splitting
    - If we have more 3rd party dependencies in our app, the output bundle will become large and make the app takes a long time to load.
    - Code-Splitting is a feature supported by bundlers like Webpack, Rollup and Browserify, where it'll split the bundle into multiple chunks which can be dynamically loaded at runtime. 

Pure Functions
	- For the given input, the function returns the same output always.
	- It does not depend on any data outside/inside the function
	- It doesn't have any side effects.

const ref = useRef() - ref.current can be mutable. Once it's, it wont rerender the component.
getDerivedStateFromError - This lifecycle is invoked after an error has been thrown by a descendant component. It is called during the “render” phase, so side-effects are not permitted.
componentDidCatch - This lifecycle is invoked after an error has been thrown by a descendant component.It is called during the “commit” phase, so side-effects are permitted.
useReducer - when we have complex state logic that involves multiple sub-values or when the next state depends on the previous one

Radium
	1.An NPM package which helps to use inline styles with Psuedo selectors and media queries.
	2.How to use it.
		Import the package in any JS File
		Wrap the exporting component with the imported object name - Higher Order Component.
			import Radium from 'radium';
			style = {	//Psuedo selectors
				':hover' : 'red'
			}
			exports default Radium(App);

Styled-Components
	1.An NPM package used to create inline styles for all the HTML elements resulting in a valid React Component.
	2.How to use it.
		import styled from 'styled-components';
		const StyledDiv = styled.div`
			width: 60%,
			height: 200px

			@media (min-width: 500px){
				width: 600px;
			}
		`;
		<StyledDiv>
			<OurComponets/>
			<p>
		</StyledDiv>

Seperate Style Classes for individual Components
	For react-scripts 1.* version,
		1.Run - npm run eject : To get access to the webpack configurations
		2.Goto webpack.config.dev.js, find test: /\.css$/, under options add the following,
			options: {
				modules: true,
				localIdentName: '[name]__[local]__[hash:base64:5]';
			}
		3.Also copy the above to webpack.config.prod.js by finding the same text and add it to the options sections like the above.
		4.Then npm start.
		5.Alter the imports like,
			import classes from 'App.css';
			<button className={classes.Button}/>

Additional Packages
	1.prop-types
		1.Validate prop of React properties
		Ex : BurgerIngredient.propTypes = {
				type: PropTypes.string.isRequired
				}
	2.Axios
		1.A javascript library to send Ajax requests
		2.GET request
			axios.get(:URL).then((response) => {})
		3.POST request	
			axios.post(:URL, :data(object));
		4.DELETE request
			axios.delete(:URL).then((response) => {})
		5.Interceptors - It's event occurs for each and every request and response if configured seperately in an root(index) file.
			var myInterceptor = axios.interceptors.request.use(request => {return request;}, error => {return Promise.reject(error);})
		6.Remove interceptors
			axios.interceptors.request.eject(myInterceptor);
		7.Configuring axios	
			axios.defaults.baseURL = "http://www.google.com"
			axios.defaults.headers.common['Authorization'] = 'AUTH TOKEN';
		8.We can also create seperate file for axios instance and use it everywhere
			const axios = axios.create({axios.defaults.baseURL = "http://www.google.com"})
			exports default axios;
	3.react-router react-router-dom
		1.Used in SPA to render difference pages by routing to different components
		2.Implementation
			1.Need to wrap root component(index.js) with BrowserRouter from 'react-router-dom'
			2.Route to the corresponding component by 
			  <Route path="/" exact component={Posts}/>
			3.Navigation link should be
			  <Link to="/">Home</Link>
			  <Link to={{
				  pathname: "/new-post",
				  hash: "submit",
				  search: "?id=123"
			  }}>New Post</Link>
			  We can also navigate programmatically and we dont need to wrap in Link.
			  	this.props.history.push({pathname: "/new-post"}) or this.props.history.push("/new-post"})
			4.Supply parameters for the route.
				<Link to="/" + 1>Home</Link>
				<Route path="/:id" component={FullPosts}/>
			  Optional Parameters
				<Route to="/:year?/:month?" />
			5.Extract route parameter values
				this.props.match.params.id	
			6.Extract query parameter values
				this.props.location.search	//id=123
				const query = URLSearchParams(this.props.location.search)	//query.entries[0] = ['start', '5']	
				
				From 3rd party library : query-string
				queryString.parse(this,props.location.search);
			7.Extract fragment values
				this.props.location.hash	//'submit'
			8.Make only one route i.e., first matched route should execute by wrapping all the routes with in Switch.
				<Switch>
					<Route path="/new-posts" component={FullPosts}/>
					<Route path="/:id" component={FullPosts}/>
				</Switch>
			9.To redirect to the another route if some route is visited, then	
				<Redirect from="/" to="/new-post" />
				from should only be specified only if the Route is wrapped in Switch.
				
			  Programmatic redirect
				Push - Adds new location to history, goes back to previous page when click back button in a browser
					this.props.history.push('/products');
				Replace - Prevents from redrecting back to previous page
			10.We can handle 404 error by
				<Route render={() => {<h1>file not found </h1>}} />
			11.Lazy loading or Code splitting
				Request or download only required files
			12.To access match, history etc location, the component should be wrapped in BrowserRouter otherwise we have to do the following
				import {withRouter} from 'react-router-dom';
				export default withRouter(Burger);
	4.React toastify
		Display toast messages in react application
			npm i react-toastify
		Include in App.js file	
			import { ToastContainer } from 'react-toastify';
			import 'react-toastify/dist/ReactToastify.css';
			<ToastContainer />
		Show messages in any container by importing and calling the imported function.
			import { toast } from 'react-toastify';
			toast.error('Unexpected error occured.');
	5.Logging service
		We use sentry.io for error logging because of its popularity.
		We can integrate sentry in react app by two methods,
		1. 
			Install raven
				npm i raven-js
			Import it in index.js
				import Raven from 'raven-js';
			After import configure by below code
				Raven.config(
					'https://30540785a3204e749775c9d089119ae7@o397291.ingest.sentry.io/5251639',
					{
						release: '1-0-0',
						environment: 'development',
					}
				).install();
		2.
			Install Sentry(Sentry.io)
				npm install @sentry/browser
			Then initialize with below code
				Sentry.init({
					dsn:
						'https://30540785a3204e749775c9d089119ae7@o397291.ingest.sentry.io/5251639',
				});
	6.JWT decode
		Its used to decode the JWT.
		Install
			npm i jwt-decode
		Import 
			import {JwtDecode} from 'jwt-decode';
		Use
			const data = JwtDecode(jwt);
			
	7. Redux debugging
		Package Name - redux-devtools-extension
		Implementation 
			const store = createStore(reducer, devToolsEnhancer({ trace: true }));
			
		Export user integractions to json file and simulate those interactions in another machine or user using export and import options in redux dev tools.

Creating environment variables
	For development env. variables, create a file named '.env.development' in root folder.
	For production env. variables, create a file named '.env' in root folder.
	Name variables staring 'REACT_APP' otherwise it will not work.
	Eg : REACT_APP_NAME=Vidly
		REACT_APP_VERSION=1
	In order to access env variables in application, use
		process.env.REACT_APP_NAME
	Note:
		While building, env variables are replaces with the value defined in .env file.
		Eg : process.env.REACT_APP_NAME will be replaced as 'Vidly'.

Deploy app to server
	1.Execute npm run build 

	Firebase Deploy
		2.Execute firebase login
		3.Execute firebase init
		4.Execute firebase deploy
	
	Heroku Deploy
		2.Install 'Heroku CLI'
		3.Check installation by 'heroku -v'
		4.Login by 'heroku login'
		5.Create heroku app in git project folder by
			heroku create 'appname'/ empty it will create a autogenerated name for us.
		6.Deploy to server by
			git push heroku master
		7.Open the heroku app by
			heroku open


React Lifeccyle Events
	Mount
		Instance of the component is created and inserted into the DOM.
		Lifeccyle hooks are constructor, render and componentDidMount in order.
		componentDidMount()
			Called when component is rendered into the DOM / Executes on the client side after the first render.
			Here we can make AJAX calls to get data from the server and state can also be modified here.	 	
	Update
		Triggers when props or state of the component gets changed
		Lifeccyle hooks are render and componentDidUpdate.
		componentDidUpdate(prevProp, prevState) – Called when component gets updated.
	Unmount
		Triggers when component or any react element is removed from the DOM.
		componentWillUnmount() – Used to clear up the memory space. Called right after the component is unmounted from the DOM
		53
	componentWillMount() – Executes immediately before rendering starts on both the client-side and the server-side
	componentWillReceiveProps() – Invokes when props are received from the parent class and before another render is called
	componentWillUpdate() – Called immediately before rendering takes place in the DOM
	shouldComponentUpdate() – Returns either true or false. Though false by default, needs to be set to return true if the component needs to be updated
	
Refs
	In order to access the DOM elements inside a component we have to use refs.
	Ex : 
		usernameRef = React.createRef();
		<input ref={this.usernameRef} className='form-control' type='text' name='' id='username' />
		this.usernameRef.current.value;
	
Concurrent rendering
	- It's a behind the scenes capability that powers features like Suspense.
	Eg: Pre-redering the screens ahead of time before showing to the user.

Concurrent Mode
	- It is an experimental feature.
	- Concurrent Mode is a set of new features that help React apps stay responsive and gracefully adjust to the user’s device capabilities and network speed.
	- React in Concurrent Mode can interrupt an ongoing update to do something more important, and then come back to what it was doing earlier.
	- In Concurrent Mode, React can work on several state updates concurrently.
	Note: React 18 was released with support for concurrency. However, there is no “mode” anymore, and the new behavior is fully opt-in and only enabled when you use the new features.
	Ref: https://17.reactjs.org/docs/concurrent-mode-intro.html

	Blocking rendering
		- Once the component start rendering an update, including creating new DOM nodes and running the code inside components, we can’t interrupt this work. In Concurrent Mode, rendering is not blocking. It is interruptible.

Concurrent React
	- A key property of Concurrent React is that rendering is interruptible.

	Asynchronous rendering/transaction
		- React may start rendering an update, pause in the middle, then continue later. It may even abandon an in-progress render altogether.
		- With this capability, React can prepare new screens in the background without blocking the main thread.
		- This means the UI can respond immediately to user input even if it’s in the middle of a large rendering task, creating a fluid user experience.

	Reusable state
		- Concurrent React can remove sections of the UI from the screen, then add them back later while reusing the previous state.
		- For example, when a user tabs away from a screen and back, React should be able to restore the previous screen in the same state it was in before.

React 18
	Improvements
		1. Automatic batching
		2. useId

	Opt-in new features
		1. startTransition
		2. useDeferredValue
		3. Streaming SSR with Suspense

	New API's
		- startTransition() - a method to start transitions when the hook cannot be used.
	
	Hooks
		- useDeferredValue()
		- useTransition() - a hook to start transitions, including a value to track the pending state.
		- useId()
		- useSyncExternalStore()

	Dropping Support for Internet Explorer

	Note:
		Batching
			- React will batch the state updates automatically occured in React event handlers. But updates occured outside events(promises, setTimeout, native event handlers) are not batched.
			- After React 18, React batches all the state updates and re-renders only once at the end. We also opt-out the automatic batching. 
			Eg:
			handleOnIncrementSync = () => {
				setTimeout(() => {
					this.setState(({ counter }) => ({ counter: counter + 1 }));
					console.log("count:", this.state.counter); // 1
					this.setState(({ flag }) => ({ flag: !flag }));
				}, 0);
			};

			handleOnIncrement = () => {
				this.setState(({ counter }) => ({ counter: counter + 1 }));
				console.log("count:", this.state.counter); // 0
				this.setState(({ flag }) => ({ flag: !flag }));
			};
			Ref: https://github.com/reactwg/react-18/discussions/21

		Server Components
			- After retrieving the HTML skeleton from the server, if one part of the app(Component) takes longer time to load, the whole app becomes un-response.
			- From React 18, one slow part doesn't slow the whole page. Show the initial HTML early and stream the rest.