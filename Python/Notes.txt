History
    - Created by Guido van Rossam in 1990
    - Python 3 was released in 2008
    - Specifically designed as an easy to use language
    - Highly focused on redability of code

Why Python
    - Focuses on optimizing developer time rather than computer processing time

Python  
    - It uses dynamic typing
    - We can reassign variables to different Datatypes 

Datatypes
    int
        - Whole nubers
        Eg: 10
    float
        Decimal numbers
        Eg: 20.45
    str
        Ordered sequence of characters
        Eg: "Hello"
    list
        Ordered sequence of objects
        Eg: [1, 2, "hello"]
    dict
        Un Ordered key value pairs
        Eg: {"name": "John"}
    tup
        Ordered immutable sequence of objects
        Eg: (1, 2, "hello")   
    set
        Un Ordered collections of unique objects
        Eg: {"a", "b"}
    bool
        Eg: True or False
    NoneType
        None 

Operators
    Exponentiation
        Eg: print(2 ** 3) // 8  

    Division
        - It returns always a float
        Eg: print(2 / 1) // 2.0
            print(1 // 2) // 0 (rounded to nearest lesser interger)

    Replication
        - The * (asterisk) sign, when applied to a string and number (or a number and string, as it remains commutative in this position) becomes a replication operator.
        Eg:
            "James" * 3 // "JamesJamesJames"
            3 * "an" // "ananan"
            5 * "2" (or "2" * 5) // "22222"

    Logical operators
        conjunction -> and
            Eg: counter > 0 and value == 100
        disjunction -> or
        negation -> not
            Eg: print(not True) // False
    
    Bitwise operators
        conjunction -> &
        disjunction -> |
        negation -> ~
        exclusive or (xor) -> ^
            Eg: 
                0 ^ -> 1
                1 ^ -> 0
    
        Argument A	Argument B	A & B	 A | B	A ^ B
            0	        0	      0	       0	  0
            0	        1	      0	       1	  1
            1	        0	      0	       1	  1
            1	        1	      1	       1	  0
        Examples:
            x = 15 # 0000 1111
            y = 16 # 0001 0000

            x & y = 0 // 0000 0000
            x | y = 31 // 0001 1111
            Ëœ x = 240* // 1111 0000
            x ^ y = 31 // 0001 1111
            y >> 1 = 8 // 0000 1000
            y << 3 =  // 1000 0000
    
    Shifting operators
        Left
            <value-in-int> << <no-of-shifts>
            Eg: 17 << 2 // 68 # 17 * 4 (17 multiplied by 2 to the power of 2)
        Right
            <value-in-int> >> <no-of-shifts>
            Eg: 17 >> 1 // 8 # Same as 17 // 2 (17 floor-divided by 2 to the power of 1)

    in and not   
        Eg:
        my_list = [0, 3, 12, 8, 2]

        print(5 in my_list) // False
        print(5 not in my_list) // True
        print(12 in my_list)    // True


    Priority	Operator	
        1	        ~, +, -	(unary)
        2	        **	
        3	        *, /, //, %	
        4	        +, -	(binary)
        5	        <<, >>	
        6	        <, <=, >, >=	
        7	        ==, !=	
        8	        &	
        9	        |	
        10      	=, +=, -=, *=, /=, %=, &=, ^=, |=, >>=, <<=	

Get user input
    input("Tell me something")

Type Casting
    Eg:
        float("1.6") // 1.6
        int("4") // 4
        str(4) // "4"

Strings
    Indexing & Slicing
        my_string = 'abcdef'
        my_string[0] // a
        my_string[1:4] // bcd
        my_string[0:4:2] // ac
        my_string[::-1] // fedcba

Inbuilt methods
    format
        Eg: print("This is a {}".format("string")) // This is a string
            print("Name is {1}, {0}".format("John", "Doe")) // Name is Doe, John
            print("Name is {lName}, {fName}".format(fName="John", lName="Doe")) // Name is Doe, John
            result = 100 / 777
            print("The result is {r:1.3f}".format(r=result)) // The result is 0.129
    f-string
        Eg: print(f"My name is {name}")

    range
        range(10) // 0 -> 9
        range(3, 10) // 3 -> 9
        range(0, 10, 2) // 2, 4, 6..

    enumerate
        for index,value in enumerate('Hello')
            print(index) // 0...

    zip
        for value1,value2 in zip(['a', 'b', 'c'], [1,2,3])
            print(value1)   // 'a'

    min & max
        min([1, 2, 3]) // 1
        max([1, 2, 3]) // 3

    input
        result = input('What is ur name?') // Returns the typed value

    type
        type(10) // int

    int
        int("10") // 10

    float
        float(10) // 10.0

    iter
        - turn into iterator so that can be used like generator.
        Eg:
        word = 'Hello'
        word_gen = iter(word)
        next(word_gen) // 'H'

Inbuilt keywords
    in
        'a' in 'abc' // true
        1 in [1, 2, 3] // True
        'key1' in {'key1' : 100 } // True
        100 in {'key1' : 100 }.values() // True
    
    global
        - extend a globally scoped/created members inside functions.
        Eg:
        def my_function():
            global var
            var = 2
            print("Do I know that variable?", var)
        var = 1
        my_function()
        print(var) 

Conditional Statements
    if, elif, else
        Eg: 
        loc = 'USA'
        if loc == 'USA':
            print('Welcome to USA')
        elif loc == 'UK':
            print('Welcome to UK')
        else
            print('Welcome to India')
    for
        Eg:
        for item in [1, 2, 3, 4]:
            print(item)
        
        for <(a, b) | a,b> in [(1, 2), (3, 4)]:
            print(a)
            print(b)

        for item in {'k1': 1, 'k2': 2, 'k3': 3}:
            print(item)  // k1

        for key,value in {'k1': 1, 'k2': 2, 'k3': 3}.items():
            print(key + ' ' + value)  // "k1 1"

        word = "Python"
        for letter in word:
            print(letter, end="*")

        i = 111
        for i in range(2, 1):
            print(i)
        else:
            print("else:", i)
        Output:
            else: 111

        for i in range(5):
            print(i)
        else:
            print("else:", i)
        Output:
            0
            1
            2
            3
            4
            else: 4



    while
        while <condition>:
            <statement>
        else:   //  It is always executed once, regardless of whether the loop has entered its body or not.
            <statement>

    Loop control
        break
        continue

List comprehension / Flattened for
    Eg:
    word = 'Hello'
    myList = []
    for letter in word
        myList.append(letter)
    myList // ['H', 'e', 'l', 'l', 'o']
                    ||
    myList = [letter for letter in word]
    myList // ['H', 'e', 'l', 'l', 'o']

    myList = [num**2 for num in range(0, 11)]
    myList // [0, 1, 4...]         

    Generator comprehension
        myList = [num for num in range(0, 11) if num % 2 == 0]
        myList // [0, 2, 4, 6...]

        myList = [x*y for x in [1, 2, 3] for y in [10, 100, 1000]]
        myList // [10, 100, 1000, 20, 200, 2000 ...]

        chess_board = [[EMPTY for i in range(8)] for j in range(8)]

Functions
    Syntax
        def <function-name>(<arguments>):

    *args
        - Arguments
        - Returns Tuple
        - Can be any name. Like *arguments etc

    **kwargs
        - Keyword arguments
        - Returns Dictionary
        - Can be any name. Like *arguments etc

    Refer ./functions.py


File system
    myFile = open('myfile.txt)
    myFile = open('myfile.txt, mode='r/w/a/r+/w+')
    myFile.write('Sample Text')
    myFile.write('Sample Text 2')
    myFile.read() // Sample Text\nSample Text 2
    myFile.readline() // ['Sample Text\n', 'Sample Text 2']

import
    from random import shuffle

    random
    1. shuffle
    shuffle([1, 2, 3]) // random shuffled order

    2. randint
    Returns random integer for the specified min and max range
    randint(0, 100) // 79


Creating modules
    - Create a new python script file with some name. For Eg: myModule.py
    myModule.py
        def from_module():
            print("I am from module")

    - Importing the module in program
    myProgram.py
        from myModule import from_module

        from_module() // I am from module

Creating Package
    - Create a folder named MyMainPackage. Inside that, create a python script file with name __init__.py and leave it empty.
    - Create another python script file inside MyMainPackage folder. For Eg: 
    myMainProgram.py
        def from_mainpackage():
            print("I am from main package")
    - Inside that MyMainPackage, create another folder with name MySubPackage. Inside that create a python script file with name as __init__.py and leave it empty.
    - Create another python script file inside MySubPackage folder. For Eg: 
    mySubProgram.py
        def from_subpackage():
            print("I am from sub package")
    - Importing the package in program
    myProgram.py
        from MyMainPackage import myMainProgram
        from MyMainPackage.MySubPackage import mySubProgram

        myMainProgram.from_mainpackage() // I am from main package
        mySubProgram.from_subpackage() // I am from sub package

Check whether the python script is executing directly
    - if __name__ == "__main__":

Exception Handling
    Eg: 
    try:
        // some code
    except TypeError:
        // some code
    except:
        // All other error
    else:
        // In case of no error
    finally:
        // Always run

Unit testing
    Eg: 
    cap.py
        def cap_text(input):
            return input.capitalize()

    cap_test.py
        import unittest
        import cap

        class TestCap(unittest.TestCase):
            def test_one(self):
                text = 'python'
                result = cap.cap_text(text)
                self.assertEqual(result, 'Python')
        
        if __name__ == '__main__':
            unittest.main()

Decorators
    Eg:
    def new_decorator(decoratee):
        def wrapper():
            // some extra code
            decoratee()

        return wrapper
    
    def func_needs_decoration():
        print('I am decorated')

    Usage:
    after_decoration = new_decorator(func_needs_decoration)
    after_decoration()

    The above usage can also be written using decorators
    @new_decorator
    def func_needs_decoration():
        print('I am decorated')

    func_needs_decoration()

Debugging
    import pdp

    pdp.set_trace() // put breakpoints inside the code

    - Quit the debugger
        Press 'q'

    Reference: https://docs.python.org/3/library/pdb.html
    
Collections
    Refer /collection.py

Generators
    Eg:
    /generators.py
    def calculate_cubes(n):
        for value in range(n):
            yield value**3

    for cubed in calculate_cubes(10)
        print(cubed)
    
    list(calculate_cubes(10)) // [0, 1 ... 729]

OS
    Refer /os_module.py

Shell Utils
    Refer /shel_util.py

Datetime
    import datetime

    # new time
    mytime = datetime.time(2, 20) // hour: 2 minute: 20
    mytime.minute // 20

    # today
    today = datetime.date.today() 
    print(today) // 2020-08-22
    today.yeay // 2020
    today.month // 8

    # date and time
    today.ctime()

    from datetime import datetime
    mdydatetime = datetime(2021, 10, 3, 14, 20, 1)

Zipping and Unzipping files
    Refer: zip_unzip.py

Web Scraping
    - Techniques involving automating the gathering of data from a website

    Libraries
        > pip install requests - make http requests and gather info
        > pip install lxml - Used for processing XML and HTML
        > pip install bs4 - Used for pulling data out of HTML and XML files

    Get response text from a website
        import requests, bs4

        response = requests.get('http://www.example.com/')
        print(response.text) # prints HTML doc as text

    Refer: /web_scraping.py

Install pip
    > py -m ensurepip --upgrade

Upgrade pip
    > python -m pip install --upgrade pip
    
Regular Expressions
    text = 'My phone number is 111-111-1111'
    phone = re.search(r'\d\d\d-\d\d\d-\d\d\d\d')
    phone.group() // 111-111-1111

    phone = re.search(r'\d{3}-\d{3}-\d{3}')
    phone.group() // 111-111-1111

    phone = re.compile(r'(\d{3})-(\d{3})-(\d{3})') // combine group of reg exp into one
    phone.group() // 111-111-1111
    phone.group(1) // 111

    re.search(r'cat|dog', 'The dog is here') // 'dog' - OR operator

    re.findall(r'.at', 'The cat in the hat sat there') // ['cat', 'at', 'at'] - Wildcard(.) operator

    re.findall(r'^\d', '1 is a number') // ['1'] - Startswith
    re.findall(r'\d$', 'The number is 1') // ['1'] - Endswith

    re.findall(r'[^\d]', 'one 1 two 2') // [o n e  t w o  ]
    re.findall(r'[^\d]+', 'one 1 two 2') // ['one ', ' two ']

    re.findall(r'\w+-\w+', 'Find hypen-words in the long-ish string') // ['hypen-words', 'long-ish']

Useful Packages
    colorama
        - Print console text in colors.

        Install
            > pip install colorama

        Usage
            > from colorama import init, Fore
            > init()
            > print(Fore.RED + "Welcome")

Swap variables
    variable_1 = 1
    variable_2 = 2
    variable_1, variable_2 = variable_2, variable_1

Slice a list
    list_1 = [1]
    list_2 = list_1[:]
    list_1[0] = 2
    print(list_2) // 1

References:
https://github.com/Pierian-Data/Complete-Python-3-Bootcamp

Notes:
    - Tuple is immutable